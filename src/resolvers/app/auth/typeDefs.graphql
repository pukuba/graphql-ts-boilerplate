type AuthorizationError implements Error {
    message: String!
    path: String!
}

union isAuthorizedPayload = AuthorizationError | User

extend type Query {
    isAuthorized: isAuthorizedPayload! @isAuthenticated
}

extend type Mutation {
    register(input: RegisterInput!): JWT!
}

input RegisterInput {
    email: EmailAddress!
    password: String! @constraint(pattern:"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$", uniqueTypeName: "Password")
}

type User {
    email: EmailAddress!
    createdAt: DateTime!
    updatedAt: DateTime!
}

directive @isAuthenticated on FIELD_DEFINITION