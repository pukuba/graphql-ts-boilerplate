type DuplicateEmailError implements Error {
    message: String!
    path: String!
    suggestion: String!
}

type InvalidAccountError implements Error {
    message: String!
    path: String!
    suggestion: String!
}

type User {
    email: EmailAddress!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type LoginInfo {
    token: JWT!
    user: User!
}

union IsAuthorizedPayload = AuthorizationError | User

union RegisterPayload = DuplicateEmailError | User

union LoginPayload = InvalidAccountError | LoginInfo

extend type Query {
    isAuthorized: IsAuthorizedPayload! @isAuthenticated
}

extend type Mutation {
    register(input: RegisterInput!): RegisterPayload!
    login(input: LoginInput!): LoginPayload!
}

input RegisterInput {
    email: EmailAddress!
    password: String! @constraint(pattern:"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$", uniqueTypeName: "Password")
}

input LoginInput {
    email: EmailAddress!
    password: String! @constraint(pattern:"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$", uniqueTypeName: "Password")
}